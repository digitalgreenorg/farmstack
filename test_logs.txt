============================= test session starts ==============================
platform darwin -- Python 3.10.0, pytest-7.1.2, pluggy-1.0.0
django: settings: core.settings (from env)
rootdir: /Users/ugesh/PycharmProjects/datahub-api, configfile: pytest.ini
plugins: Faker-19.2.0, factoryboy-2.5.1, html-3.2.0, cov-4.1.0, metadata-3.0.0, django-4.5.2
collected 163 items

microsite/tests/test_home_view.py .........
microsite/tests/test_policy_view.py ......
participant/tests/test_create_new_req_views.py ...file_size 5244276
..file_size 133144
..
participant/tests/test_support_ticket_views.py ...{'category': 'connectors'}
.{'status': 'open'}
.{'status': 'closed'}
...{'category1': 'invalid category'}
.{'id': '1234', 'name': 'abc'}
.This QueryDict instance is immutable
.
participant/tests/test_views_support.py .file_size 5244276
..file_size 444858
.......
accounts/tests/test_views.py ...................
datahub/tests/test_datahub_models.py {'_state': <django.db.models.base.ModelState object at 0x1555e9030>,
 'approval_status': True,
 'created_at': datetime.datetime(2023, 8, 7, 11, 8, 13, 130451, tzinfo=datetime.timezone.utc),
 'email': 'iSmyJkTgRb@example.com',
 'first_name': None,
 'id': UUID('d1ba5274-68d5-4ae5-a367-c531bb57f703'),
 'last_name': None,
 'on_boarded': False,
 'on_boarded_by_id': None,
 'phone_number': None,
 'profile_picture': <ImageFieldFile: None>,
 'role_id': -1060744074,
 'status': True,
 'subscription': None,
 'updated_at': datetime.datetime(2023, 8, 7, 11, 8, 13, 130478, tzinfo=datetime.timezone.utc)}
.
datahub/tests/test_dataset_views.py ........
datahub/tests/test_models.py {'_state': <django.db.models.base.ModelState object at 0x1561fc1c0>,
 'approval_status': True,
 'created_at': datetime.datetime(2023, 8, 7, 11, 8, 14, 191537, tzinfo=datetime.timezone.utc),
 'email': 'InnMZrDKva@example.com',
 'first_name': None,
 'id': UUID('22765304-4230-4e7a-b369-04e38644325a'),
 'last_name': None,
 'on_boarded': False,
 'on_boarded_by_id': None,
 'phone_number': None,
 'profile_picture': <ImageFieldFile: None>,
 'role_id': -472493511,
 'status': True,
 'subscription': None,
 'updated_at': datetime.datetime(2023, 8, 7, 11, 8, 14, 191550, tzinfo=datetime.timezone.utc)}
.
datahub/tests/test_views_new.py ...........
datahub/tests/test_views_old.py ........................FFFFFFFF
microsite/tests/test_homepage_url.py ..
microsite/tests/test_policy_url.py ..
participant/tests/test_support_urls.py .participant.views.SupportTicketResolutionsViewset
..participant.views.SupportTicketV2ModelViewSet
...
participant/tests/test_urls.py ..ResolverMatch(func=participant.views.ParticipantDatasetsViewSet, args=(), kwargs={}, url_name='participant_datasets-list', app_names=[], namespaces=[], route='participant/datasets/$')
...
accounts/tests/test_urls.py ....
accounts/tests/test_views.py .
datahub/tests/test_datahub_urls.py .ResolverMatch(func=datahub.views.OrganizationViewSet, args=(), kwargs={}, url_name='organization-list', app_names=[], namespaces=[], route='datahub/organization/$')
..ResolverMatch(func=datahub.views.ParticipantViewSet, args=(), kwargs={}, url_name='participant-list', app_names=[], namespaces=[], route='datahub/participant/$')
.datahub.views.ParticipantViewSet
.ResolverMatch(func=datahub.views.DatahubDatasetsViewSet, args=(), kwargs={}, url_name='datahub_datasets-list', app_names=[], namespaces=[], route='datahub/datasets/$')
.ResolverMatch(func=participant.views.SupportTicketV2ModelViewSet, args=(), kwargs={}, url_name='support_tickets-list', app_names=[], namespaces=[], route='participant/support_ticket/$')
.
datahub/tests/test_urls.py ..ResolverMatch(func=datahub.views.DatahubNewDashboard, args=(), kwargs={}, url_name='new_dashboard-dashboard', app_names=[], namespaces=[], route='datahub/newdashboard/dashboard/$')
.datahub.views.DatahubNewDashboard
..ResolverMatch(func=datahub.views.DatasetV2View, args=(), kwargs={}, url_name='datasets/v2-list', app_names=[], namespaces=[], route='datahub/new_dataset_v2/$')
.datahub.views.DatasetV2View
.....ResolverMatch(func=datahub.views.OrganizationViewSet, args=(), kwargs={}, url_name='organization-list', app_names=[], namespaces=[], route='datahub/organization/$')
..ResolverMatch(func=datahub.views.ParticipantViewSet, args=(), kwargs={}, url_name='participant-list', app_names=[], namespaces=[], route='datahub/participant/$')
.datahub.views.ParticipantViewSet
.ResolverMatch(func=datahub.views.DatahubDatasetsViewSet, args=(), kwargs={}, url_name='datahub_datasets-list', app_names=[], namespaces=[], route='datahub/datasets/$')
...ResolverMatch(func=participant.views.ParticipantSupportViewSet, args=(), kwargs={}, url_name='support-list', app_names=[], namespaces=[], route='participant/support/$')
.
datahub/tests/test_urls_new.py ResolverMatch(func=datahub.views.StandardisationTemplateView, args=(), kwargs={}, url_name='standardise-list', app_names=[], namespaces=[], route='datahub/standardise/$')
..

=================================== FAILURES ===================================
__ ParticipantCostewardsListingTestViews.test_get_co_steward_details_endpoint __

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    def _cursor(self, name=None):
        self.close_if_health_check_failed()
        self.ensure_connection()
        with self.wrap_database_errors:
>           return self._prepare_cursor(self.create_cursor(name))

venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<DatabaseWrapper vendor='postgresql' alias='default'>, None)
kwargs = {}

    @wraps(func)
    def inner(*args, **kwargs):
        # Detect a running event loop in this thread.
        try:
            get_running_loop()
        except RuntimeError:
            pass
        else:
            if not os.environ.get("DJANGO_ALLOW_ASYNC_UNSAFE"):
                raise SynchronousOnlyOperation(message)
        # Pass onward.
>       return func(*args, **kwargs)

venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           psycopg2.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError

The above exception was the direct cause of the following exception:

self = <datahub.tests.test_views_old.ParticipantCostewardsListingTestViews testMethod=test_get_co_steward_details_endpoint>

    def setUp(self) -> None:
    
        super().setUpClass()
        self.client = Client()
        self.participant_url = reverse("participant-list")
    
>       user_role_admin = UserRole.objects.create(
            id="1",
            role_name="datahub_admin"
        )

datahub/tests/test_views_old.py:878: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:671: in create
    obj.save(force_insert=True, using=self.db)
venv/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
venv/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
venv/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
venv/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1658: in execute_sql
    with self.connection.cursor() as cursor:
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:323: in cursor
    return self._cursor()
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:300: in _cursor
    with self.wrap_database_errors:
venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: in _cursor
    return self._prepare_cursor(self.create_cursor(name))
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           django.db.utils.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError
_ ParticipantCostewardsListingTestViews.test_get_co_steward_details_not_found_endpoint _

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    def _cursor(self, name=None):
        self.close_if_health_check_failed()
        self.ensure_connection()
        with self.wrap_database_errors:
>           return self._prepare_cursor(self.create_cursor(name))

venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<DatabaseWrapper vendor='postgresql' alias='default'>, None)
kwargs = {}

    @wraps(func)
    def inner(*args, **kwargs):
        # Detect a running event loop in this thread.
        try:
            get_running_loop()
        except RuntimeError:
            pass
        else:
            if not os.environ.get("DJANGO_ALLOW_ASYNC_UNSAFE"):
                raise SynchronousOnlyOperation(message)
        # Pass onward.
>       return func(*args, **kwargs)

venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           psycopg2.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError

The above exception was the direct cause of the following exception:

self = <datahub.tests.test_views_old.ParticipantCostewardsListingTestViews testMethod=test_get_co_steward_details_not_found_endpoint>

    def setUp(self) -> None:
    
        super().setUpClass()
        self.client = Client()
        self.participant_url = reverse("participant-list")
    
>       user_role_admin = UserRole.objects.create(
            id="1",
            role_name="datahub_admin"
        )

datahub/tests/test_views_old.py:878: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:671: in create
    obj.save(force_insert=True, using=self.db)
venv/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
venv/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
venv/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
venv/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1658: in execute_sql
    with self.connection.cursor() as cursor:
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:323: in cursor
    return self._cursor()
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:300: in _cursor
    with self.wrap_database_errors:
venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: in _cursor
    return self._prepare_cursor(self.create_cursor(name))
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           django.db.utils.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError
_ ParticipantCostewardsListingTestViews.test_get_participant_details_endpoint __

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    def _cursor(self, name=None):
        self.close_if_health_check_failed()
        self.ensure_connection()
        with self.wrap_database_errors:
>           return self._prepare_cursor(self.create_cursor(name))

venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<DatabaseWrapper vendor='postgresql' alias='default'>, None)
kwargs = {}

    @wraps(func)
    def inner(*args, **kwargs):
        # Detect a running event loop in this thread.
        try:
            get_running_loop()
        except RuntimeError:
            pass
        else:
            if not os.environ.get("DJANGO_ALLOW_ASYNC_UNSAFE"):
                raise SynchronousOnlyOperation(message)
        # Pass onward.
>       return func(*args, **kwargs)

venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           psycopg2.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError

The above exception was the direct cause of the following exception:

self = <datahub.tests.test_views_old.ParticipantCostewardsListingTestViews testMethod=test_get_participant_details_endpoint>

    def setUp(self) -> None:
    
        super().setUpClass()
        self.client = Client()
        self.participant_url = reverse("participant-list")
    
>       user_role_admin = UserRole.objects.create(
            id="1",
            role_name="datahub_admin"
        )

datahub/tests/test_views_old.py:878: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:671: in create
    obj.save(force_insert=True, using=self.db)
venv/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
venv/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
venv/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
venv/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1658: in execute_sql
    with self.connection.cursor() as cursor:
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:323: in cursor
    return self._cursor()
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:300: in _cursor
    with self.wrap_database_errors:
venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: in _cursor
    return self._prepare_cursor(self.create_cursor(name))
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           django.db.utils.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError
_ ParticipantCostewardsListingTestViews.test_get_participant_details_not_found_endpoint _

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    def _cursor(self, name=None):
        self.close_if_health_check_failed()
        self.ensure_connection()
        with self.wrap_database_errors:
>           return self._prepare_cursor(self.create_cursor(name))

venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<DatabaseWrapper vendor='postgresql' alias='default'>, None)
kwargs = {}

    @wraps(func)
    def inner(*args, **kwargs):
        # Detect a running event loop in this thread.
        try:
            get_running_loop()
        except RuntimeError:
            pass
        else:
            if not os.environ.get("DJANGO_ALLOW_ASYNC_UNSAFE"):
                raise SynchronousOnlyOperation(message)
        # Pass onward.
>       return func(*args, **kwargs)

venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           psycopg2.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError

The above exception was the direct cause of the following exception:

self = <datahub.tests.test_views_old.ParticipantCostewardsListingTestViews testMethod=test_get_participant_details_not_found_endpoint>

    def setUp(self) -> None:
    
        super().setUpClass()
        self.client = Client()
        self.participant_url = reverse("participant-list")
    
>       user_role_admin = UserRole.objects.create(
            id="1",
            role_name="datahub_admin"
        )

datahub/tests/test_views_old.py:878: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:671: in create
    obj.save(force_insert=True, using=self.db)
venv/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
venv/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
venv/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
venv/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1658: in execute_sql
    with self.connection.cursor() as cursor:
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:323: in cursor
    return self._cursor()
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:300: in _cursor
    with self.wrap_database_errors:
venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: in _cursor
    return self._prepare_cursor(self.create_cursor(name))
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           django.db.utils.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError
_____ ParticipantCostewardsListingTestViews.test_list_co_steward_endpoint ______

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    def _cursor(self, name=None):
        self.close_if_health_check_failed()
        self.ensure_connection()
        with self.wrap_database_errors:
>           return self._prepare_cursor(self.create_cursor(name))

venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<DatabaseWrapper vendor='postgresql' alias='default'>, None)
kwargs = {}

    @wraps(func)
    def inner(*args, **kwargs):
        # Detect a running event loop in this thread.
        try:
            get_running_loop()
        except RuntimeError:
            pass
        else:
            if not os.environ.get("DJANGO_ALLOW_ASYNC_UNSAFE"):
                raise SynchronousOnlyOperation(message)
        # Pass onward.
>       return func(*args, **kwargs)

venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           psycopg2.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError

The above exception was the direct cause of the following exception:

self = <datahub.tests.test_views_old.ParticipantCostewardsListingTestViews testMethod=test_list_co_steward_endpoint>

    def setUp(self) -> None:
    
        super().setUpClass()
        self.client = Client()
        self.participant_url = reverse("participant-list")
    
>       user_role_admin = UserRole.objects.create(
            id="1",
            role_name="datahub_admin"
        )

datahub/tests/test_views_old.py:878: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:671: in create
    obj.save(force_insert=True, using=self.db)
venv/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
venv/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
venv/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
venv/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1658: in execute_sql
    with self.connection.cursor() as cursor:
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:323: in cursor
    return self._cursor()
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:300: in _cursor
    with self.wrap_database_errors:
venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: in _cursor
    return self._prepare_cursor(self.create_cursor(name))
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           django.db.utils.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError
_____ ParticipantCostewardsListingTestViews.test_list_participant_endpoint _____

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    def _cursor(self, name=None):
        self.close_if_health_check_failed()
        self.ensure_connection()
        with self.wrap_database_errors:
>           return self._prepare_cursor(self.create_cursor(name))

venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<DatabaseWrapper vendor='postgresql' alias='default'>, None)
kwargs = {}

    @wraps(func)
    def inner(*args, **kwargs):
        # Detect a running event loop in this thread.
        try:
            get_running_loop()
        except RuntimeError:
            pass
        else:
            if not os.environ.get("DJANGO_ALLOW_ASYNC_UNSAFE"):
                raise SynchronousOnlyOperation(message)
        # Pass onward.
>       return func(*args, **kwargs)

venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           psycopg2.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError

The above exception was the direct cause of the following exception:

self = <datahub.tests.test_views_old.ParticipantCostewardsListingTestViews testMethod=test_list_participant_endpoint>

    def setUp(self) -> None:
    
        super().setUpClass()
        self.client = Client()
        self.participant_url = reverse("participant-list")
    
>       user_role_admin = UserRole.objects.create(
            id="1",
            role_name="datahub_admin"
        )

datahub/tests/test_views_old.py:878: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:671: in create
    obj.save(force_insert=True, using=self.db)
venv/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
venv/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
venv/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
venv/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1658: in execute_sql
    with self.connection.cursor() as cursor:
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:323: in cursor
    return self._cursor()
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:300: in _cursor
    with self.wrap_database_errors:
venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: in _cursor
    return self._prepare_cursor(self.create_cursor(name))
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           django.db.utils.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError
_______________ CategoriesTestCaseView.test_get_categories_data ________________

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    def _cursor(self, name=None):
        self.close_if_health_check_failed()
        self.ensure_connection()
        with self.wrap_database_errors:
>           return self._prepare_cursor(self.create_cursor(name))

venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<DatabaseWrapper vendor='postgresql' alias='default'>, None)
kwargs = {}

    @wraps(func)
    def inner(*args, **kwargs):
        # Detect a running event loop in this thread.
        try:
            get_running_loop()
        except RuntimeError:
            pass
        else:
            if not os.environ.get("DJANGO_ALLOW_ASYNC_UNSAFE"):
                raise SynchronousOnlyOperation(message)
        # Pass onward.
>       return func(*args, **kwargs)

venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           psycopg2.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError

The above exception was the direct cause of the following exception:

self = <datahub.tests.test_views_old.CategoriesTestCaseView testMethod=test_get_categories_data>

    def setUp(self) -> None:
        super().setUpClass()
        # cls.client = Client()
        self.categories_url = reverse("dataset/v2-list")
>       user_role = UserRole.objects.create(
            id="1",
            role_name="datahub_admin"
        )

datahub/tests/test_views_old.py:1000: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:671: in create
    obj.save(force_insert=True, using=self.db)
venv/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
venv/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
venv/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
venv/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1658: in execute_sql
    with self.connection.cursor() as cursor:
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:323: in cursor
    return self._cursor()
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:300: in _cursor
    with self.wrap_database_errors:
venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: in _cursor
    return self._prepare_cursor(self.create_cursor(name))
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           django.db.utils.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError
_______________ CategoriesTestCaseView.test_post_categories_data _______________

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    def _cursor(self, name=None):
        self.close_if_health_check_failed()
        self.ensure_connection()
        with self.wrap_database_errors:
>           return self._prepare_cursor(self.create_cursor(name))

venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<DatabaseWrapper vendor='postgresql' alias='default'>, None)
kwargs = {}

    @wraps(func)
    def inner(*args, **kwargs):
        # Detect a running event loop in this thread.
        try:
            get_running_loop()
        except RuntimeError:
            pass
        else:
            if not os.environ.get("DJANGO_ALLOW_ASYNC_UNSAFE"):
                raise SynchronousOnlyOperation(message)
        # Pass onward.
>       return func(*args, **kwargs)

venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           psycopg2.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError

The above exception was the direct cause of the following exception:

self = <datahub.tests.test_views_old.CategoriesTestCaseView testMethod=test_post_categories_data>

    def setUp(self) -> None:
        super().setUpClass()
        # cls.client = Client()
        self.categories_url = reverse("dataset/v2-list")
>       user_role = UserRole.objects.create(
            id="1",
            role_name="datahub_admin"
        )

datahub/tests/test_views_old.py:1000: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:671: in create
    obj.save(force_insert=True, using=self.db)
venv/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
venv/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
venv/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
venv/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
venv/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1658: in execute_sql
    with self.connection.cursor() as cursor:
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:323: in cursor
    return self._cursor()
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:300: in _cursor
    with self.wrap_database_errors:
venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
venv/lib/python3.10/site-packages/django/db/backends/base/base.py:301: in _cursor
    return self._prepare_cursor(self.create_cursor(name))
venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <DatabaseWrapper vendor='postgresql' alias='default'>, name = None

    @async_unsafe
    def create_cursor(self, name=None):
        if name:
            # In autocommit mode, the cursor will be used outside of a
            # transaction, hence use a holdable cursor.
            cursor = self.connection.cursor(
                name, scrollable=False, withhold=self.connection.autocommit
            )
        else:
>           cursor = self.connection.cursor()
E           django.db.utils.InterfaceError: connection already closed

venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:269: InterfaceError
=============================== warnings summary ===============================
venv/lib/python3.10/site-packages/nose/importer.py:12
  /Users/ugesh/PycharmProjects/datahub-api/venv/lib/python3.10/site-packages/nose/importer.py:12: DeprecationWarning: the imp module is deprecated in favour of importlib and slated for removal in Python 3.12; see the module's documentation for alternative uses
    from imp import find_module, load_module, acquire_lock, release_lock

venv/lib/python3.10/site-packages/rest_framework_simplejwt/utils.py:6
  /Users/ugesh/PycharmProjects/datahub-api/venv/lib/python3.10/site-packages/rest_framework_simplejwt/utils.py:6: RemovedInDjango50Warning: The django.utils.timezone.utc alias is deprecated. Please update your code to use datetime.timezone.utc instead.
    from django.utils.timezone import is_naive, make_aware, utc

venv/lib/python3.10/site-packages/rest_framework/fields.py:30
  /Users/ugesh/PycharmProjects/datahub-api/venv/lib/python3.10/site-packages/rest_framework/fields.py:30: RemovedInDjango50Warning: The django.utils.timezone.utc alias is deprecated. Please update your code to use datetime.timezone.utc instead.
    from django.utils.timezone import utc

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED datahub/tests/test_views_old.py::ParticipantCostewardsListingTestViews::test_get_co_steward_details_endpoint
FAILED datahub/tests/test_views_old.py::ParticipantCostewardsListingTestViews::test_get_co_steward_details_not_found_endpoint
FAILED datahub/tests/test_views_old.py::ParticipantCostewardsListingTestViews::test_get_participant_details_endpoint
FAILED datahub/tests/test_views_old.py::ParticipantCostewardsListingTestViews::test_get_participant_details_not_found_endpoint
FAILED datahub/tests/test_views_old.py::ParticipantCostewardsListingTestViews::test_list_co_steward_endpoint
FAILED datahub/tests/test_views_old.py::ParticipantCostewardsListingTestViews::test_list_participant_endpoint
FAILED datahub/tests/test_views_old.py::CategoriesTestCaseView::test_get_categories_data
FAILED datahub/tests/test_views_old.py::CategoriesTestCaseView::test_post_categories_data
================== 8 failed, 155 passed, 3 warnings in 10.45s ==================
